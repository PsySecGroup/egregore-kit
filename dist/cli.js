#!/bin/bash
var m=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports);var a=m((S,g)=>{g.exports={name:"egregore-kit",description:"Tools to detect egregore activity.",version:"1.0.1",author:"The PsySec Group",license:"MIT",bugs:{url:"https://github.com/PsySecGroup/egregore-kit/issues"},homepage:"https://github.com/PsySecGroup/egregore-kit#readme",repository:{type:"git",url:"git+https://github.com/PsySecGroup/egregore-kit.git"},scripts:{start:"node -r source-map-support/register dist/index.js",cli:"node -r source-map-support/register dist/cli.js",dev:`echo 'Type "npm run sb-watch" to get started'`,build:"tsup-node --legacy-output --dts --minify --format esm,cjs,iife","sb-watch":`nodemon --watch src/ -e ts,tsx,js --exec "tsup-node --dts --onSuccess 'node -r source-map-support/register dist/index.js'"`,watch:"tsup-node --watch --dts --onSuccess 'node -r source-map-support/register dist/index.js'",test:`nodemon --watch tests/ --watch src/ -e ts,tsx,js --exec "tsup-node --entry.tests=tests/index.ts --onSuccess 'uvu -r source-map-support/register dist ^tests.js$'"`},tsup:{entry:["src/index.ts","src/cli.ts"],splitting:!1,sourcemap:!0,clean:!1,dts:!1},main:"./dist/index.js",module:"./dist/esm/index.js",types:"./dist/index.d.ts",files:["/dist"],devDependencies:{"@types/node":"^17.0.41",nodemon:"^2.0.16","source-map-support":"^0.5.21",tsup:"^6.1.0",typescript:"^4.7.3",uvu:"^0.5.3"},dependencies:{commander:"^9.3.0",dotenv:"^16.0.3","easy-match":"^1.1.5",fastify:"^4.7.0","is-negative-zero":"^2.0.2","ts-node":"^10.8.1"}}});var u=require("commander");var i=require("path");require("dotenv").config();var P=process.env.HOSTNAME||"0.0.0.0",T=parseInt(process.env.PORT)||3e3,c=process.env.REPORT_DIR||(0,i.resolve)(__dirname,"../reports");async function p(s){return new Promise(e=>{let r=process.openStdin();r.on("data",async function(d){let o=[];d.toString().split(`
`).forEach(n=>{n.trim()!==""&&o.push(n)}),await s(o)}),r.on("end",function(){e(!0)})})}var{name:h,description:l,version:f}=a(),t=new u.Command;t.name(h).description(l).version(f);t.command("update").description("Updates a report").argument("<name>","Identifier of the report to update").argument("[source]",'CSV string of "METHOD ENDPOINT" strings, a URL.  This argument can be ignored when using Linux piping.').action((s,e)=>{console.log(s,e)});async function y(){await p(async s=>{console.log(s),console.log(c)}),t.parse()}y();
//# sourceMappingURL=cli.js.map