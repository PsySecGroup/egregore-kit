{"version":3,"sources":["../tests/index.ts","../tests/httpRequest.ts","../src/httpRequest.ts","../src/vector.ts","../src/quadrantPoint.ts","../src/space.ts","../tests/quadrantPoint.ts","../tests/space.ts","../tests/vector.ts"],"sourcesContent":["import { test } from 'uvu'\r\nimport './httpRequest'\r\nimport './quadrantPoint'\r\nimport './space'\r\nimport './vector'\r\n\r\ntest.run()","import { test } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport { HttpRequest } from '../src'\n\ntest('HTTP Request: Construct', async () => {\n  const request = new HttpRequest('GET', '/test', 100)\n\n  assert.equal(request.method, 'GET')\n  assert.equal(request.endpoint, '/test')\n  assert.equal(request.time, 100)\n})\n\ntest('HTTP Request: String match pass', async () => {\n  const request = new HttpRequest('GET', '/test')\n  const query = new HttpRequest('GET', '/test')\n\n  assert.equal(request.isMatch(query), true);\n})\n\ntest('HTTP Request: String match fail', async () => {\n  const request = new HttpRequest('GET', '/test')\n  const query = new HttpRequest('GET', '/beep')\n\n  assert.equal(request.isMatch(query), false);\n})\n\ntest('HTTP Request: Right wildcard pass', async () => {\n  const request = new HttpRequest('GET', '/post/88594')\n  const query = new HttpRequest('GET', '/post/*')\n\n  assert.equal(request.isMatch(query), true);\n})\n\ntest('HTTP Request: Right wildcard fail', async () => {\n  const request = new HttpRequest('GET', '/video/88594')\n  const query = new HttpRequest('GET', '/post/*')\n\n  assert.equal(request.isMatch(query), false);\n})\n\ntest('HTTP Request: Inner wildcard pass', async () => {\n  const request = new HttpRequest('GET', '/post/88594/log')\n  const query = new HttpRequest('GET', '/post/*/log')\n\n  assert.equal(request.isMatch(query), true);\n})\n\n\ntest('HTTP Request: Inner wildcard fail', async () => {\n  const request = new HttpRequest('GET', '/video/88594/log')\n  const query = new HttpRequest('GET', '/post/*/log')\n\n  assert.equal(request.isMatch(query), false);\n})\n\ntest('HTTP Request: Load from JSON', async () => {\n  const request = new HttpRequest({\n    method: 'GET',\n    endpoint: '/test', \n    time: 100\n  })\n\n  assert.equal(request.method, 'GET')\n  assert.equal(request.endpoint, '/test')\n  assert.equal(request.time, 100)\n})\n","import EasyMatch from 'easy-match'\n\ntype HttpRequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\ninterface HttpRequestJson {\n  method: HttpRequestMethod\n  endpoint: string\n  time?: number\n}\n\n/**\n * \n */\nexport class HttpRequest {\n  method: HttpRequestMethod\n  endpoint: string\n  time: number\n\n  constructor (method: HttpRequestMethod | HttpRequestJson, endpoint?: string, time: number = 0) {\n    if (typeof method === 'string') {\n      this.method = method\n      this.endpoint = endpoint\n      this.time = time\n    } else {\n      this.method = method.method\n      this.endpoint = method.endpoint\n      this.time = method.time || 0\n    }\n  }\n\n  /**\n   * \n   */\n  isMatch (query: HttpRequest) {\n    return EasyMatch([this.method], [query.method]).ismatch && EasyMatch([this.endpoint], [query.endpoint]).ismatch\n  }\n}\n","import { QuadrantPoint, QuadrantType } from \"./quadrantPoint\"\n\nexport class Vector {\n  type: QuadrantType\n  content: number\n  context: number\n\n  constructor (point: QuadrantPoint) {\n    this.type = point.type\n    this.content = point.content\n    this.context = point.context\n  }\n}\n","import { Vector } from \"./vector\"\n\nexport enum QuadrantType {\n  socialCreate,\n  personalCreate,\n  personalDestroy,\n  socialDestroy\n}\n\ninterface QuadrantPointJson {\n  type: QuadrantType\n  content: number\n  context: number\n  time?: number\n}\n\n/**\n * \n */\nexport class QuadrantPoint {\n  type: QuadrantType\n  time: number\n  content: number\n  context: number\n\n  constructor (type: QuadrantType | QuadrantPointJson, content: number = 0, context: number = 0, time: number = 0) {\n    if(typeof type === 'number') {\n      this.type = type\n      this.content = content\n      this.context = context\n      this.time = time\n    } else {\n      const json = type as QuadrantPointJson\n      this.type = json.type\n      this.content = json.content\n      this.context = json.context\n      this.time = json.time\n    }\n  }\n\n  /**\n   * \n   */\n  addContext (value: number = 1) {\n    this.context += value\n  }\n\n  /**\n   * \n   */\n  addContent (value: number = 1) {\n    this.content += value\n  }\n\n  /**\n   * \n   */\n  toVector () {\n    return new Vector(this)\n  }\n}","const isNegativeZero = require( 'is-negative-zero')\nimport { HttpRequest } from \"./httpRequest\"\nimport { QuadrantPoint, QuadrantType } from \"./quadrantPoint\"\nimport { Vector } from \"./vector\"\n\ninterface MethodStringMap {\n  social: string[]\n  personal: string[]\n  create: string[]\n  destroy: string[]\n}\n\ninterface MethodMap {\n  social: HttpRequest[]\n  personal: HttpRequest[]\n  create: HttpRequest[]\n  destroy: HttpRequest[]\n}\n\ninterface QuadrantPoints {\n  [QuadrantType.socialCreate]: QuadrantPoint[],\n  [QuadrantType.personalCreate]: QuadrantPoint[],\n  [QuadrantType.personalDestroy]: QuadrantPoint[],\n  [QuadrantType.socialDestroy]: QuadrantPoint[]\n}\n\nconst PI_RADIAN = 180 / Math.PI\n\n/**\n * \n */\nfunction requestSearch (list: HttpRequest[], request: HttpRequest) {\n  return list.find(endpoint => request.isMatch(endpoint)) !== undefined\n}\n\n/**\n * \n */\n function getDegrees (a: Vector, b: Vector, offset = 360) {\n  const slope = (b.context - a.context) / (b.content - a.content)\n  const degree = Math.atan(slope) * PI_RADIAN\n  let angle = degree % 360;\n  \n  if (angle < 0) {\n    angle += offset\n  } else if (isNegativeZero(angle)) {\n    angle = 180\n  }\n  \n  return angle\n}\n\n/**\n * \n */\nexport class Space {\n  private endpoints: MethodMap\n  private points: QuadrantPoints = {\n    [QuadrantType.socialCreate]: [],\n    [QuadrantType.personalCreate]: [],\n    [QuadrantType.personalDestroy]: [],\n    [QuadrantType.socialDestroy]: []\n  }\n\n  constructor (endpoints: MethodMap | MethodStringMap) {\n    const social: HttpRequest[] = typeof endpoints.social[0] !== 'string'\n      ? endpoints.social as HttpRequest[]\n      : endpoints.social.map(endpoint => {\n        const parts = endpoint.split(' ')\n        return new HttpRequest(parts[0], parts[1])\n      }) as HttpRequest[]\n\n    const personal: HttpRequest[] = typeof endpoints.personal[0] !== 'string'\n    ? endpoints.personal as HttpRequest[]\n    : endpoints.personal.map(endpoint => {\n      const parts = endpoint.split(' ')\n      return new HttpRequest(parts[0], parts[1])\n    }) as HttpRequest[]\n\n    const create: HttpRequest[] = typeof endpoints.create[0] !== 'string'\n    ? endpoints.create as HttpRequest[]\n    : endpoints.create.map(endpoint => {\n      const parts = endpoint.split(' ')\n      return new HttpRequest(parts[0], parts[1])\n    }) as HttpRequest[]\n\n    const destroy: HttpRequest[] = typeof endpoints.destroy[0] !== 'string'\n    ? endpoints.destroy as HttpRequest[]\n    : endpoints.destroy.map(endpoint => {\n      const parts = endpoint.split(' ')\n      return new HttpRequest(parts[0], parts[1])\n    }) as HttpRequest[]\n\n    this.endpoints = {\n      social,\n      personal,\n      create,\n      destroy\n    }\n  }\n\n  /**\n   * Convert an HTTP request into a quandrant point\n   */\n  addRequests (requests: HttpRequest[]) {\n    for (const request of requests) {\n      if (requestSearch(this.endpoints.social, request)) {\n        this.points[QuadrantType.socialCreate].push(new QuadrantPoint(QuadrantType.socialCreate, 0, 1, request.time))\n      }\n      \n      if (requestSearch(this.endpoints.personal, request)) {\n        this.points[QuadrantType.personalCreate].push(new QuadrantPoint(QuadrantType.personalCreate, 0, -1, request.time))\n      }\n      \n      if (requestSearch(this.endpoints.create, request)) {\n        this.points[QuadrantType.personalDestroy].push(new QuadrantPoint(QuadrantType.personalDestroy, 1, 0, request.time))\n      }\n      \n      if (requestSearch(this.endpoints.destroy, request)) {\n        this.points[QuadrantType.socialDestroy].push(new QuadrantPoint(QuadrantType.socialDestroy, -1, 0, request.time))\n      }\n    }\n  }\n\n  /**\n   * \n   */\n  getPoints () {\n    return[\n      ...this.points[QuadrantType.socialCreate],\n      ...this.points[QuadrantType.personalCreate],\n      ...this.points[QuadrantType.personalDestroy],\n      ...this.points[QuadrantType.socialDestroy]\n    ]\n  }\n\n  /**\n   * \n   */\n   private _reduce (points: QuadrantPoint[]) {\n    if (points.length === 0) {\n      return false\n    }\n\n    let content = 0\n    let context = 0\n\n    for (const point of points) {\n      context += point.context\n      content += point.content\n    }\n\n    const result = new QuadrantPoint(points[0].type, content, context).toVector()\n\n    return result\n  }\n\n  /**\n   * \n   */\n  getVectors (users: number) {\n    const vectors = [\n      this._reduce(this.points[QuadrantType.socialCreate]),\n      this._reduce(this.points[QuadrantType.personalCreate]),\n      this._reduce(this.points[QuadrantType.personalDestroy]),\n      this._reduce(this.points[QuadrantType.socialDestroy])\n    ].filter(vector => vector !== false) as Vector[]\n\n    const result = {\n      temperature: 0,\n      pressure: 0,\n      vectors,\n      angles: []\n    }\n\n    for (let i = 0, len = result.vectors.length; i < len; i++) {\n      const vector = result.vectors[i]\n      const nextVector = result.vectors[i + 1] === undefined\n        ? result.vectors[0]\n        : result.vectors[i + 1]\n\n      result.angles.push(getDegrees(vector, nextVector, 360 - (i * 90)))\n      result.temperature += vector.context\n      result.pressure +=  vector.content\n    }\n\n    result.temperature /= users\n    result.pressure /= users\n\n    return result\n  }\n}","import { test } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport { QuadrantPoint, QuadrantType } from '../src/quadrantPoint'\n\ntest('Quadrant Points: Construct', async () => {\n  const point = new QuadrantPoint(QuadrantType.socialCreate)\n\n  assert.equal(point.content, 0)\n  assert.equal(point.context, 0)\n  assert.equal(point.type, QuadrantType.socialCreate)\n})\n\ntest('Quadrant Points: Construct from JSON', async () => {\n  const point = new QuadrantPoint({\n    type: QuadrantType.socialCreate,\n    context: 10,\n    content: 20\n  })\n\n  assert.equal(point.content, 20)\n  assert.equal(point.context, 10)\n  assert.equal(point.type, QuadrantType.socialCreate)\n})\n\ntest('Quadrant Points: Modify', async () => {\n  const point = new QuadrantPoint(QuadrantType.socialCreate, 30, 100)\n\n  point.addContent(30)\n  point.addContext(100)\n\n  assert.equal(point.content, 60)\n  assert.equal(point.context, 200)\n  assert.equal(point.type, QuadrantType.socialCreate)\n})\n","import { test } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport { HttpRequest, Space } from '../src'\n\nconst endpoints = {\n  social: [\n    new HttpRequest('POST', '/like/*'),\n    new HttpRequest('POST', '/favorite/*'),\n    new HttpRequest('POST', '/friendRequest/*'),\n    new HttpRequest('POST', '/post/*/comment'),\n    new HttpRequest('POST', '/search/*'),\n    new HttpRequest('POST', '/joinGroup/*'),\n    new HttpRequest('POST', '/report'),\n    new HttpRequest('POST', '/block/*'),\n    new HttpRequest('POST', '/unfriend/*')\n  ],\n  personal: [\n    new HttpRequest('POST', '/video'),\n    new HttpRequest('POST', '/post'),\n    new HttpRequest('POST', '/settings'),\n    new HttpRequest('POST', '/changePassword'),\n  ],\n  create: [\n    new HttpRequest('POST', '/video'),\n    new HttpRequest('POST', '/post'),\n    new HttpRequest('POST', '/post/*/comment'),\n    new HttpRequest('POST', '/like/*'),\n    new HttpRequest('POST', '/favorite/*'),\n    new HttpRequest('POST', '/friendRequest/*'),\n    new HttpRequest('POST', '/post/*/comment'),\n    new HttpRequest('POST', '/search/*'),\n    new HttpRequest('POST', '/joinGroup/*')\n  ],\n  destroy: [\n    new HttpRequest('DELETE', '/video/*'),\n    new HttpRequest('POST', '/changePassword'),\n    new HttpRequest('POST', '/settings'),\n    new HttpRequest('DELETE', '/post/*'),\n    new HttpRequest('DELETE', '/comment/*'),\n    new HttpRequest('PUT', '/video/*'),\n    new HttpRequest('PUT', '/post/*'),\n    new HttpRequest('PUT', '/comment/*'),\n    new HttpRequest('POST', '/report'),\n    new HttpRequest('POST', '/block/*'),\n    new HttpRequest('POST', '/unfriend/*')\n  ]\n}\n\ntest('Space: Get Points', async () => {\n  const space = new Space(endpoints)\n\n  space.addRequests([\n    new HttpRequest('POST', '/like/1', 1),\n    new HttpRequest('POST', '/video', 2),\n    new HttpRequest('POST', '/friendRequest/3', 3),\n    new HttpRequest('POST', '/block/4', 4)\n  ])\n\n  const points = space.getPoints()\n\n  assert.equal(points.length, 8)\n\n  assert.equal(points[0].type, 0)\n  assert.equal(points[0].content, 0)\n  assert.equal(points[0].context, 1)\n  assert.equal(points[0].time, 1)\n\n  assert.equal(points[1].type, 0)\n  assert.equal(points[1].content, 0)\n  assert.equal(points[1].context, 1)\n  assert.equal(points[1].time, 3)\n\n  assert.equal(points[2].type, 0)\n  assert.equal(points[2].content, 0)\n  assert.equal(points[2].context, 1)\n  assert.equal(points[2].time, 4)\n\n  assert.equal(points[3].type, 1)\n  assert.equal(points[3].content, 0)\n  assert.equal(points[3].context, -1)\n  assert.equal(points[3].time, 2)\n\n  assert.equal(points[4].type, 2)\n  assert.equal(points[4].content, 1)\n  assert.equal(points[4].context, 0)\n  assert.equal(points[4].time, 1)\n\n  assert.equal(points[5].type, 2)\n  assert.equal(points[5].content, 1)\n  assert.equal(points[5].context, 0)\n  assert.equal(points[5].time, 2)\n\n  assert.equal(points[6].type, 2)\n  assert.equal(points[6].content, 1)\n  assert.equal(points[6].context, 0)\n  assert.equal(points[6].time, 3)\n\n  assert.equal(points[7].type, 3)\n  assert.equal(points[7].content, -1)\n  assert.equal(points[7].context, 0)\n  assert.equal(points[7].time, 4)\n})\n\ntest('Space: Get Vectors 1', async () => {\n  const space = new Space(endpoints)\n\n  space.addRequests([\n    new HttpRequest('POST', '/like/1', 1),\n    new HttpRequest('POST', '/video', 2),\n    new HttpRequest('POST', '/friendRequest/3', 3),\n    new HttpRequest('POST', '/block/4', 4)\n  ])\n\n  const shape = space.getVectors(1)\n\n  assert.equal(shape.temperature, 2)\n  assert.equal(shape.pressure, 2)\n\n  assert.equal(shape.vectors.length, 4)\n  assert.equal(shape.angles.length, 4)\n\n  assert.equal(shape.vectors[0].type, 0)\n  assert.equal(shape.vectors[0].content, 0)\n  assert.equal(shape.vectors[0].context, 3)\n  assert.equal(shape.angles[0], 270)\n\n  assert.equal(shape.vectors[1].type, 1)\n  assert.equal(shape.vectors[1].content, 0)\n  assert.equal(shape.vectors[1].context, -1)\n  assert.equal(shape.angles[1], 18.43494882292201)\n\n  assert.equal(shape.vectors[2].type, 2)\n  assert.equal(shape.vectors[2].content, 3)\n  assert.equal(shape.vectors[2].context, 0)\n  assert.equal(shape.angles[2], 180)\n\n  assert.equal(shape.vectors[3].type, 3)\n  assert.equal(shape.vectors[3].content, -1)\n  assert.equal(shape.vectors[3].context, 0)\n  assert.equal(shape.angles[3], 71.56505117707799)\n})\n\ntest('Space: Get Vectors 1', async () => {\n  const space = new Space(endpoints)\n\n  space.addRequests([\n    new HttpRequest('POST', '/like/1', 1),\n    new HttpRequest('POST', '/video', 2),\n    new HttpRequest('POST', '/friendRequest/3', 3)\n  ])\n\n  const shape = space.getVectors(1)\n\n  assert.equal(shape.temperature, 1)\n  assert.equal(shape.pressure, 3)\n\n  assert.equal(shape.vectors.length, 3)\n  assert.equal(shape.angles.length, 3)\n\n  assert.equal(shape.vectors[0].type, 0)\n  assert.equal(shape.vectors[0].content, 0)\n  assert.equal(shape.vectors[0].context, 2)\n  assert.equal(shape.angles[0], 270)\n\n  assert.equal(shape.vectors[1].type, 1)\n  assert.equal(shape.vectors[1].content, 0)\n  assert.equal(shape.vectors[1].context, -1)\n  assert.equal(shape.angles[1], 18.43494882292201)\n\n  assert.equal(shape.vectors[2].type, 2)\n  assert.equal(shape.vectors[2].content, 3)\n  assert.equal(shape.vectors[2].context, 0)\n  assert.equal(shape.angles[2], 146.30993247402023)\n})\n\ntest('Space: Get Points from JSON endpoints', async () => {\n  const space = new Space({\n    social: [\n      'POST /like/*',\n      'POST /favorite/*',\n      'POST /friendRequest/*',\n      'POST /post/*/comment',\n      'POST /search/*',\n      'POST /joinGroup/*',\n      'POST /report',\n      'POST /block/*',\n      'POST /unfriend/*'\n    ],\n    personal: [\n      'POST /video',\n      'POST /post',\n      'POST /settings',\n      'POST /changePassword',\n    ],\n    create: [\n      'POST /video',\n      'POST /post',\n      'POST /post/*/comment',\n      'POST /like/*',\n      'POST /favorite/*',\n      'POST /friendRequest/*',\n      'POST /post/*/comment',\n      'POST /search/*',\n      'POST /joinGroup/*'\n    ],\n    destroy: [\n      'DELETE /video/*',\n      'POST /changePassword',\n      'POST /settings',\n      'DELETE /post/*',\n      'DELETE /comment/*',\n      'PUT /video/*',\n      'PUT /post/*',\n      'PUT /comment/*',\n      'POST /report',\n      'POST /block/*',\n      'POST /unfriend/*'\n    ]\n  })\n\n  space.addRequests([\n    new HttpRequest('POST', '/like/1', 1),\n    new HttpRequest('POST', '/video', 2),\n    new HttpRequest('POST', '/friendRequest/3', 3),\n    new HttpRequest('POST', '/block/4', 4)\n  ])\n\n  const points = space.getPoints()\n\n  assert.equal(points.length, 8)\n\n  assert.equal(points[0].type, 0)\n  assert.equal(points[0].content, 0)\n  assert.equal(points[0].context, 1)\n  assert.equal(points[0].time, 1)\n\n  assert.equal(points[1].type, 0)\n  assert.equal(points[1].content, 0)\n  assert.equal(points[1].context, 1)\n  assert.equal(points[1].time, 3)\n\n  assert.equal(points[2].type, 0)\n  assert.equal(points[2].content, 0)\n  assert.equal(points[2].context, 1)\n  assert.equal(points[2].time, 4)\n\n  assert.equal(points[3].type, 1)\n  assert.equal(points[3].content, 0)\n  assert.equal(points[3].context, -1)\n  assert.equal(points[3].time, 2)\n\n  assert.equal(points[4].type, 2)\n  assert.equal(points[4].content, 1)\n  assert.equal(points[4].context, 0)\n  assert.equal(points[4].time, 1)\n\n  assert.equal(points[5].type, 2)\n  assert.equal(points[5].content, 1)\n  assert.equal(points[5].context, 0)\n  assert.equal(points[5].time, 2)\n\n  assert.equal(points[6].type, 2)\n  assert.equal(points[6].content, 1)\n  assert.equal(points[6].context, 0)\n  assert.equal(points[6].time, 3)\n\n  assert.equal(points[7].type, 3)\n  assert.equal(points[7].content, -1)\n  assert.equal(points[7].context, 0)\n  assert.equal(points[7].time, 4)\n})","import { test } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport { QuadrantPoint, QuadrantType } from '../src/quadrantPoint'\n\ntest('Vector: To 1/1 Vector', async () => {\n  const socialCreate = new QuadrantPoint(QuadrantType.socialCreate, 1, 1)\n  const personalCreate = new QuadrantPoint(QuadrantType.personalCreate, 1, 1)\n  const personalDestroy = new QuadrantPoint(QuadrantType.personalDestroy, 1, 1)\n  const socialDestroy = new QuadrantPoint(QuadrantType.socialDestroy, 1, 1)\n\n  const socialCreateVector = socialCreate.toVector()\n  const personalCreateVector = personalCreate.toVector()\n  const personalDestroyVector = personalDestroy.toVector()\n  const socialDestroyVector = socialDestroy.toVector()\n\n  assert.equal(socialCreateVector.content, 1)\n  assert.equal(socialCreateVector.context, 1)\n  assert.equal(socialCreateVector.type, QuadrantType.socialCreate)\n\n  assert.equal(personalCreateVector.content, 1)\n  assert.equal(personalCreateVector.context, 1)\n  assert.equal(personalCreateVector.type, QuadrantType.personalCreate)\n\n  assert.equal(personalDestroyVector.content, 1)\n  assert.equal(personalDestroyVector.context, 1)\n  assert.equal(personalDestroyVector.type, QuadrantType.personalDestroy)\n\n  assert.equal(socialDestroyVector.content, 1)\n  assert.equal(socialDestroyVector.context, 1)\n  assert.equal(socialDestroyVector.type, QuadrantType.socialDestroy)\n})\n\ntest('Vector: To 1/0 Vector', async () => {\n  const socialCreate = new QuadrantPoint(QuadrantType.socialCreate, 1, 0)\n  const personalCreate = new QuadrantPoint(QuadrantType.personalCreate, 1, 0)\n  const personalDestroy = new QuadrantPoint(QuadrantType.personalDestroy, 1, 0)\n  const socialDestroy = new QuadrantPoint(QuadrantType.socialDestroy, 1, 0)\n\n  const socialCreateVector = socialCreate.toVector()\n  const personalCreateVector = personalCreate.toVector()\n  const personalDestroyVector = personalDestroy.toVector()\n  const socialDestroyVector = socialDestroy.toVector()\n\n  assert.equal(socialCreateVector.content, 1)\n  assert.equal(socialCreateVector.context, 0)\n  assert.equal(socialCreateVector.type, QuadrantType.socialCreate)\n\n  assert.equal(personalCreateVector.content, 1)\n  assert.equal(personalCreateVector.context, 0)\n  assert.equal(personalCreateVector.type, QuadrantType.personalCreate)\n\n  assert.equal(personalDestroyVector.content, 1)\n  assert.equal(personalDestroyVector.context, 0)\n  assert.equal(personalDestroyVector.type, QuadrantType.personalDestroy)\n\n  assert.equal(socialDestroyVector.content, 1)\n  assert.equal(socialDestroyVector.context, 0)\n  assert.equal(socialDestroyVector.type, QuadrantType.socialDestroy)\n})\n\ntest('Vector: To 0/1 Vector', async () => {\n  const socialCreate = new QuadrantPoint(QuadrantType.socialCreate, 0, 1)\n  const personalCreate = new QuadrantPoint(QuadrantType.personalCreate, 0, 1)\n  const personalDestroy = new QuadrantPoint(QuadrantType.personalDestroy, 0, 1)\n  const socialDestroy = new QuadrantPoint(QuadrantType.socialDestroy, 0, 1)\n\n  const socialCreateVector = socialCreate.toVector()\n  const personalCreateVector = personalCreate.toVector()\n  const personalDestroyVector = personalDestroy.toVector()\n  const socialDestroyVector = socialDestroy.toVector()\n\n  assert.equal(socialCreateVector.content, 0)\n  assert.equal(socialCreateVector.context, 1)\n  assert.equal(socialCreateVector.type, QuadrantType.socialCreate)\n\n  assert.equal(personalCreateVector.content, 0)\n  assert.equal(personalCreateVector.context, 1)\n  assert.equal(personalCreateVector.type, QuadrantType.personalCreate)\n\n  assert.equal(personalDestroyVector.content, 0)\n  assert.equal(personalDestroyVector.context, 1)\n  assert.equal(personalDestroyVector.type, QuadrantType.personalDestroy)\n\n  assert.equal(socialDestroyVector.content, 0)\n  assert.equal(socialDestroyVector.context, 1)\n  assert.equal(socialDestroyVector.type, QuadrantType.socialDestroy)\n})\n\ntest('Vector: To 100/1 Vector', async () => {\n  const socialCreate = new QuadrantPoint(QuadrantType.socialCreate, 100, 1)\n  const personalCreate = new QuadrantPoint(QuadrantType.personalCreate, 100, 1)\n  const personalDestroy = new QuadrantPoint(QuadrantType.personalDestroy, 100, 1)\n  const socialDestroy = new QuadrantPoint(QuadrantType.socialDestroy, 100, 1)\n\n  const socialCreateVector = socialCreate.toVector()\n  const personalCreateVector = personalCreate.toVector()\n  const personalDestroyVector = personalDestroy.toVector()\n  const socialDestroyVector = socialDestroy.toVector()\n\n  assert.equal(socialCreateVector.content, 100)\n  assert.equal(socialCreateVector.context, 1)\n  assert.equal(socialCreateVector.type, QuadrantType.socialCreate)\n\n  assert.equal(personalCreateVector.content, 100)\n  assert.equal(personalCreateVector.context, 1)\n  assert.equal(personalCreateVector.type, QuadrantType.personalCreate)\n\n  assert.equal(personalDestroyVector.content, 100)\n  assert.equal(personalDestroyVector.context, 1)\n  assert.equal(personalDestroyVector.type, QuadrantType.personalDestroy)\n\n  assert.equal(socialDestroyVector.content, 100)\n  assert.equal(socialDestroyVector.context, 1)\n  assert.equal(socialDestroyVector.type, QuadrantType.socialDestroy)\n})\n\ntest('Vector: To 1/100 Vector', async () => {\n  const socialCreate = new QuadrantPoint(QuadrantType.socialCreate, 1, 100)\n  const personalCreate = new QuadrantPoint(QuadrantType.personalCreate, 1, 100)\n  const personalDestroy = new QuadrantPoint(QuadrantType.personalDestroy, 1, 100)\n  const socialDestroy = new QuadrantPoint(QuadrantType.socialDestroy, 1, 100)\n\n  const socialCreateVector = socialCreate.toVector()\n  const personalCreateVector = personalCreate.toVector()\n  const personalDestroyVector = personalDestroy.toVector()\n  const socialDestroyVector = socialDestroy.toVector()\n\n  assert.equal(socialCreateVector.content, 1)\n  assert.equal(socialCreateVector.context, 100)\n  assert.equal(socialCreateVector.type, QuadrantType.socialCreate)\n\n  assert.equal(personalCreateVector.content, 1)\n  assert.equal(personalCreateVector.context, 100)\n  assert.equal(personalCreateVector.type, QuadrantType.personalCreate)\n\n  assert.equal(personalDestroyVector.content, 1)\n  assert.equal(personalDestroyVector.context, 100)\n  assert.equal(personalDestroyVector.type, QuadrantType.personalDestroy)\n\n  assert.equal(socialDestroyVector.content, 1)\n  assert.equal(socialDestroyVector.context, 100)\n  assert.equal(socialDestroyVector.type, QuadrantType.socialDestroy)\n})\n"],"mappings":"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","names":[]}