#!/bin/bash
var u=(e=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(e,{get:(s,t)=>(typeof require!="undefined"?require:s)[t]}):e)(function(e){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var d=(e,s)=>()=>(s||e((s={exports:{}}).exports,s),s.exports);var p=d((j,g)=>{g.exports={name:"egregore-kit",description:"Tools to detect egregore activity.",version:"1.0.1",author:"The PsySec Group",license:"MIT",bugs:{url:"https://github.com/PsySecGroup/egregore-kit/issues"},homepage:"https://github.com/PsySecGroup/egregore-kit#readme",repository:{type:"git",url:"git+https://github.com/PsySecGroup/egregore-kit.git"},scripts:{start:"node -r source-map-support/register dist/index.js",cli:"node -r source-map-support/register dist/cli.js",dev:`echo 'Type "npm run sb-watch" to get started'`,build:"tsup-node --legacy-output --dts --minify --format esm,cjs,iife","sb-watch":`nodemon --watch src/ -e ts,tsx,js --exec "tsup-node --dts --onSuccess 'node -r source-map-support/register dist/index.js'"`,watch:"tsup-node --watch --dts --onSuccess 'node -r source-map-support/register dist/index.js'",test:`nodemon --watch tests/ --watch src/ -e ts,tsx,js --exec "tsup-node --entry.tests=tests/index.ts --onSuccess 'uvu -r source-map-support/register dist ^tests.js$'"`},tsup:{entry:["src/index.ts","src/cli.ts"],splitting:!1,sourcemap:!0,clean:!1,dts:!1},main:"./dist/index.js",module:"./dist/esm/index.js",types:"./dist/index.d.ts",files:["/dist"],devDependencies:{"@types/node":"^17.0.41",nodemon:"^2.0.16","source-map-support":"^0.5.21",tsup:"^6.1.0",typescript:"^4.7.3",uvu:"^0.5.3"},dependencies:{commander:"^9.3.0",dotenv:"^16.0.3","easy-match":"^1.1.5",fastify:"^4.7.0","is-negative-zero":"^2.0.2","ts-node":"^10.8.1"}}});import{Command as h}from"commander";import{resolve as m}from"path";u("dotenv").config();var w=process.env.HOSTNAME||"0.0.0.0",R=parseInt(process.env.PORT)||3e3,i=process.env.REPORT_DIR||m(__dirname,"../reports");async function c(e){return new Promise(s=>{let t=process.openStdin();t.on("data",async function(a){let o=[];a.toString().split(`
`).forEach(n=>{n.trim()!==""&&o.push(n)}),await e(o)}),t.on("end",function(){s(!0)})})}var{name:l,description:f,version:y}=p(),r=new h;r.name(l).description(f).version(y);r.command("update").description("Updates a report").argument("<name>","Identifier of the report to update").argument("[source]",'CSV string of "METHOD ENDPOINT" strings, a URL.  This argument can be ignored when using Linux piping.').action((e,s)=>{console.log(e,s)});async function x(){await c(async e=>{console.log(e),console.log(i)}),r.parse()}x();
//# sourceMappingURL=cli.js.map