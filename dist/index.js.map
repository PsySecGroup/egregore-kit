{"version":3,"sources":["../src/index.ts","../src/httpRequest.ts","../src/vector.ts","../src/quadrantPoint.ts","../src/space.ts"],"sourcesContent":["import { Command } from 'commander';\r\nimport { HttpRequest } from './httpRequest';\r\nimport { Space } from './space';\r\n\r\nexport {\r\n  HttpRequest,\r\n  Space\r\n}\r\n","import EasyMatch from 'easy-match'\n\ntype HttpRequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\ninterface HttpRequestJson {\n  method: HttpRequestMethod\n  endpoint: string\n  time?: number\n}\n\n/**\n * \n */\nexport class HttpRequest {\n  method: HttpRequestMethod\n  endpoint: string\n  time: number\n\n  constructor (method: HttpRequestMethod | HttpRequestJson, endpoint?: string, time: number = 0) {\n    if (typeof method === 'string') {\n      this.method = method\n      this.endpoint = endpoint\n      this.time = time\n    } else {\n      this.method = method.method\n      this.endpoint = method.endpoint\n      this.time = method.time || 0\n    }\n  }\n\n  /**\n   * \n   */\n  isMatch (query: HttpRequest) {\n    return EasyMatch([this.method], [query.method]).ismatch && EasyMatch([this.endpoint], [query.endpoint]).ismatch\n  }\n}\n","import { QuadrantPoint, QuadrantType } from \"./quadrantPoint\"\n\nexport class Vector {\n  type: QuadrantType\n  content: number\n  context: number\n\n  constructor (point: QuadrantPoint) {\n    this.type = point.type\n    this.content = point.content\n    this.context = point.context\n  }\n}\n","import { Vector } from \"./vector\"\n\nexport enum QuadrantType {\n  socialCreate,\n  personalCreate,\n  personalDestroy,\n  socialDestroy\n}\n\ninterface QuadrantPointJson {\n  type: QuadrantType\n  content: number\n  context: number\n  time?: number\n}\n\n/**\n * \n */\nexport class QuadrantPoint {\n  type: QuadrantType\n  time: number\n  content: number\n  context: number\n\n  constructor (type: QuadrantType | QuadrantPointJson, content: number = 0, context: number = 0, time: number = 0) {\n    if(typeof type === 'number') {\n      this.type = type\n      this.content = content\n      this.context = context\n      this.time = time\n    } else {\n      const json = type as QuadrantPointJson\n      this.type = json.type\n      this.content = json.content\n      this.context = json.context\n      this.time = json.time\n    }\n  }\n\n  /**\n   * \n   */\n  addContext (value: number = 1) {\n    this.context += value\n  }\n\n  /**\n   * \n   */\n  addContent (value: number = 1) {\n    this.content += value\n  }\n\n  /**\n   * \n   */\n  toVector () {\n    return new Vector(this)\n  }\n}","const isNegativeZero = require( 'is-negative-zero')\nimport { HttpRequest } from \"./httpRequest\"\nimport { QuadrantPoint, QuadrantType } from \"./quadrantPoint\"\nimport { Vector } from \"./vector\"\n\ninterface MethodStringMap {\n  social: string[]\n  personal: string[]\n  create: string[]\n  destroy: string[]\n}\n\ninterface MethodMap {\n  social: HttpRequest[]\n  personal: HttpRequest[]\n  create: HttpRequest[]\n  destroy: HttpRequest[]\n}\n\ninterface QuadrantPoints {\n  [QuadrantType.socialCreate]: QuadrantPoint[],\n  [QuadrantType.personalCreate]: QuadrantPoint[],\n  [QuadrantType.personalDestroy]: QuadrantPoint[],\n  [QuadrantType.socialDestroy]: QuadrantPoint[]\n}\n\nconst PI_RADIAN = 180 / Math.PI\n\n/**\n * \n */\nfunction requestSearch (list: HttpRequest[], request: HttpRequest) {\n  return list.find(endpoint => request.isMatch(endpoint)) !== undefined\n}\n\n/**\n * \n */\n function getDegrees (a: Vector, b: Vector, offset = 360) {\n  const slope = (b.context - a.context) / (b.content - a.content)\n  const degree = Math.atan(slope) * PI_RADIAN\n  let angle = degree % 360;\n  \n  if (angle < 0) {\n    angle += offset\n  } else if (isNegativeZero(angle)) {\n    angle = 180\n  }\n  \n  return angle\n}\n\n/**\n * \n */\nexport class Space {\n  private endpoints: MethodMap\n  private points: QuadrantPoints = {\n    [QuadrantType.socialCreate]: [],\n    [QuadrantType.personalCreate]: [],\n    [QuadrantType.personalDestroy]: [],\n    [QuadrantType.socialDestroy]: []\n  }\n\n  constructor (endpoints: MethodMap | MethodStringMap) {\n    const social: HttpRequest[] = typeof endpoints.social[0] !== 'string'\n      ? endpoints.social as HttpRequest[]\n      : endpoints.social.map(endpoint => {\n        const parts = endpoint.split(' ')\n        return new HttpRequest(parts[0], parts[1])\n      }) as HttpRequest[]\n\n    const personal: HttpRequest[] = typeof endpoints.personal[0] !== 'string'\n    ? endpoints.personal as HttpRequest[]\n    : endpoints.personal.map(endpoint => {\n      const parts = endpoint.split(' ')\n      return new HttpRequest(parts[0], parts[1])\n    }) as HttpRequest[]\n\n    const create: HttpRequest[] = typeof endpoints.create[0] !== 'string'\n    ? endpoints.create as HttpRequest[]\n    : endpoints.create.map(endpoint => {\n      const parts = endpoint.split(' ')\n      return new HttpRequest(parts[0], parts[1])\n    }) as HttpRequest[]\n\n    const destroy: HttpRequest[] = typeof endpoints.destroy[0] !== 'string'\n    ? endpoints.destroy as HttpRequest[]\n    : endpoints.destroy.map(endpoint => {\n      const parts = endpoint.split(' ')\n      return new HttpRequest(parts[0], parts[1])\n    }) as HttpRequest[]\n\n    this.endpoints = {\n      social,\n      personal,\n      create,\n      destroy\n    }\n  }\n\n  /**\n   * Convert an HTTP request into a quandrant point\n   */\n  addRequests (requests: HttpRequest[]) {\n    for (const request of requests) {\n      if (requestSearch(this.endpoints.social, request)) {\n        this.points[QuadrantType.socialCreate].push(new QuadrantPoint(QuadrantType.socialCreate, 0, 1, request.time))\n      }\n      \n      if (requestSearch(this.endpoints.personal, request)) {\n        this.points[QuadrantType.personalCreate].push(new QuadrantPoint(QuadrantType.personalCreate, 0, -1, request.time))\n      }\n      \n      if (requestSearch(this.endpoints.create, request)) {\n        this.points[QuadrantType.personalDestroy].push(new QuadrantPoint(QuadrantType.personalDestroy, 1, 0, request.time))\n      }\n      \n      if (requestSearch(this.endpoints.destroy, request)) {\n        this.points[QuadrantType.socialDestroy].push(new QuadrantPoint(QuadrantType.socialDestroy, -1, 0, request.time))\n      }\n    }\n  }\n\n  /**\n   * \n   */\n  getPoints () {\n    return[\n      ...this.points[QuadrantType.socialCreate],\n      ...this.points[QuadrantType.personalCreate],\n      ...this.points[QuadrantType.personalDestroy],\n      ...this.points[QuadrantType.socialDestroy]\n    ]\n  }\n\n  /**\n   * \n   */\n   private _reduce (points: QuadrantPoint[]) {\n    if (points.length === 0) {\n      return false\n    }\n\n    let content = 0\n    let context = 0\n\n    for (const point of points) {\n      context += point.context\n      content += point.content\n    }\n\n    const result = new QuadrantPoint(points[0].type, content, context).toVector()\n\n    return result\n  }\n\n  /**\n   * \n   */\n  getVectors (users: number) {\n    const vectors = [\n      this._reduce(this.points[QuadrantType.socialCreate]),\n      this._reduce(this.points[QuadrantType.personalCreate]),\n      this._reduce(this.points[QuadrantType.personalDestroy]),\n      this._reduce(this.points[QuadrantType.socialDestroy])\n    ].filter(vector => vector !== false) as Vector[]\n\n    const result = {\n      temperature: 0,\n      pressure: 0,\n      vectors,\n      angles: []\n    }\n\n    for (let i = 0, len = result.vectors.length; i < len; i++) {\n      const vector = result.vectors[i]\n      const nextVector = result.vectors[i + 1] === undefined\n        ? result.vectors[0]\n        : result.vectors[i + 1]\n\n      result.angles.push(getDegrees(vector, nextVector, 360 - (i * 90)))\n      result.temperature += vector.context\n      result.pressure +=  vector.content\n    }\n\n    result.temperature /= users\n    result.pressure /= users\n\n    return result\n  }\n}"],"mappings":"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","names":[]}